---
import { marked } from 'marked';
import MainLayout from '../../layouts/Layout.astro';
import { getTextContent, getMDContent } from '../../utils/loadText.ts';

const content = await getMDContent("", "OpenSource_Articles");
const content_html = marked(content);
---
<MainLayout>

<h2 style="text-align: center;margin-top: 0">OpenCommHand web terminal</h2>
<!--Button connect-->
<button id="connect"> Connect </button>

<div id="config-section" style="max-width: 600px; margin: 1rem auto; display: flex; gap: 1rem; flex-wrap: wrap;">
<!-- Layer ComboBox -->
<div style="flex: 1;">
 
    <select id="layerSelect" style="width: 100%; padding: 0.5rem;">
      <option value="" disabled selected>Select layer</option>
      <option value="0">0</option>
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
      <option value="6">6</option>
      <option value="7">7</option>
      <option value="8">8</option>
      <option value="9">9</option>

      <!-- Numbers 1 to 10 -->
      
    </select>
  </label>
</div>
  <div style="flex: 1;">
<!--Layer-->
      <input type="text" id="layerInput" placeholder="Layer Name" style="width: 100%; padding: 0.5rem;" />
    <button id="sendLayerBtn" style="width: 100%; margin-top: 0.5rem;">Send Layer</button>
  </div>
<!--Color-->
  <div style="flex: 1;">
      <input type="color" id="colorPicker" style="width: 100%; height: 2.5rem;" />
     <button id="sendColorBtn" style="width: 100%; margin-top: 0.5rem;">Send Color</button>
  </div>
  <div style="flex: 1;">
      <input type="text" id="hexCode" placeholder="#RRGGBB" style="width: 100%; padding: 0.5rem;" readonly />
  </div>
</div>

<div class="matrix" id="matrix"></div>

<h3 style="text-align:center;">Serial Monitor</h3>
<div id="output">(waiting for data...)</div>

<script>
// Extend the Navigator type to include 'serial'
interface Navigator {
  serial?: any;
}

  /** @type {any} */
  let port: any;
  let writer: any;
  let reader;
  let keepReading = true;

  const outputDiv = document.getElementById("output");

  // Connect to serial device
  const connectBtn = document.getElementById("connect");
  if (connectBtn) {
    connectBtn.addEventListener("click", async () => {
      try {
        port = await (navigator as any).serial.requestPort();
        await port.open({ baudRate: 9600 });

        writer = port.writable.getWriter();
        readSerial(); // Start listening
        alert("Connected to serial!");
      } catch (err) {
        alert("Connection failed: " + err);
      }
    });
  }

  // Read serial output continuously
  async function readSerial() {
    const decoder = new TextDecoderStream();
    port.readable.pipeTo(decoder.writable);
    reader = decoder.readable.getReader();

    if (outputDiv) outputDiv.textContent = ''; // Clear output

    try {
      while (keepReading) {
        const { value, done } = await reader.read();
        if (done) break;
        if (value && outputDiv) {
            outputDiv.innerHTML += `<span style="color:green;">⇨ ${value}</span><br>`;
            outputDiv.scrollTop = outputDiv.scrollHeight;
      }

      }
    } catch (err) {
      console.error("Serial read error:", err);
    } finally {
      reader.releaseLock();
    }
  }

  // Create 4×3 matrix of input + button
  const matrixContainer = document.getElementById("matrix");

for (let i = 0; i < 12; i++) {
  const cell = document.createElement("div");
  cell.className = "cell";

  const input = document.createElement("input");
  input.type = "text";
  input.placeholder = `Key ${i + 1}`;
  input.id = `input-${i}`;

  const button = document.createElement("button");
  button.textContent = "Send";
  const keyIndex = i; // Fix: declare keyIndex as the current index

button.onclick = async () => {
  const layerSelect = document.getElementById("layerSelect") as HTMLSelectElement | null;
  const layerNumber = layerSelect?.value || "";

  if (!writer) {
    alert("Serial not connected.");
    return;
  }

  // Ensure keyIndex is a single digit (0–9), convert to string
  const keyIndexStr = keyIndex.toString();

  const comboBytes = parseKeyCombo(input.value); // Up to 3 bytes

  const fullStr = `${layerNumber}${keyIndexStr}`;
  const encoder = new TextEncoder();
  const headerBytes = encoder.encode(fullStr); // e.g., '10' → [0x31, 0x30]

  // Combine all bytes together
  const message = new Uint8Array([
    ...headerBytes,
    ...comboBytes,
    '\n'.charCodeAt(0),
  ]);

  await writer.write(message);

  // Show debug output
  if (outputDiv) {
    const hexString = Array.from(message)
      .map(b => '\\x' + b.toString(16).padStart(2, '0'))
      .join(' ');
    outputDiv.innerHTML += `<span style="color:blue;">⇦ Sent [${hexString}]</span><br>`;
    outputDiv.scrollTop = outputDiv.scrollHeight;
  }
};

    cell.appendChild(input);
    cell.appendChild(button);
    if (matrixContainer) {
      matrixContainer.appendChild(cell);
    }
  }
  // Handle color picker changes
const colorPicker = document.getElementById("colorPicker") as HTMLInputElement | null;
const hexCode = document.getElementById("hexCode") as HTMLInputElement | null;
if (colorPicker && hexCode) {
  colorPicker.addEventListener("input", () => {
    hexCode.value = colorPicker.value.toUpperCase();
  });
}
async function sendToSerial(label: string, value: string) {
  if (!writer) {
    alert("Serial not connected.");
    return;
  }

  const msg = `${value}`;
  const encoder = new TextEncoder();
  await writer.write(encoder.encode(msg + "\n"));

  if (outputDiv) {
    outputDiv.innerHTML += `<span style="color:blue;">⇦${value}</span><br>`;
    outputDiv.scrollTop = outputDiv.scrollHeight;
  }
}
// Send Layer name
const sendLayerBtn = document.getElementById("sendLayerBtn");
if (sendLayerBtn) {
  sendLayerBtn.addEventListener("click", () => {
    const layerSelect = document.getElementById("layerSelect") as HTMLSelectElement | null;
    const layerInput = document.getElementById("layerInput") as HTMLInputElement | null;
    const layerNumber = layerSelect?.value || "";
    const layerName = layerInput?.value.trim() || "";

    if (!layerNumber || !layerName) {
      alert("Please select a layer number and enter a name.");
      return;
    }

    const message = `N${layerNumber}${layerName}`;
    sendToSerial("Layer", message);
  });
}

// Send Color hex
const sendColorBtn = document.getElementById("sendColorBtn");
if (sendColorBtn) {
  sendColorBtn.addEventListener("click", async () => {
    const layerSelect = document.getElementById("layerSelect") as HTMLSelectElement | null;
    const colorHex = hexCode?.value || "";

    const layerNumber = layerSelect?.value || "";
    if (!layerNumber || !colorHex) {
      alert("Please select a layer number and choose a color.");
      return;
    }

    // Convert "#RRGGBB" → [R, G, B]
    const r = parseInt(colorHex.slice(1, 3), 16);
    const g = parseInt(colorHex.slice(3, 5), 16);
    const b = parseInt(colorHex.slice(5, 7), 16);

    const encoder = new TextEncoder();
const layerChar = encoder.encode(layerNumber); // ASCII of layer number

const msg = new Uint8Array([
  'C'.charCodeAt(0),
  layerChar[0],  // Send as ASCII
  r,
  g,
  b,
  '\n'.charCodeAt(0)
]);


    if (!writer) {
      alert("Serial not connected.");
      return;
    }

    await writer.write(msg);

    // Show what was sent (in hex format)
    if (outputDiv) {
      const hexString = [...msg]
        .map(b => b.toString(16).padStart(2, "0"))
        .join(" ");
      outputDiv.innerHTML += `<span style="color:blue;">⇦ [${hexString}]</span><br>`;
      outputDiv.scrollTop = outputDiv.scrollHeight;
    }
  });
}
const modifierCodes: Record<string, number> = {
    CTRL:       0x80,
    SHIFT:      0x81,
    ALT:        0x82,
    GUI:        0x83,
    UP:         0xDA,
    DOWN:       0xD9,
    LEFT:       0xD8,
    RIGHT:      0xD7,
    BACKSPACE:  0xB2,
    TAB:        0xB3,
    RETURN:     0xB0,
    ESC:        0xB1,
    INS:        0xD1,
    DEL:        0xD4,
    PAGE_UP:    0xD3,
    PAGE_DOWN:  0xD6,
    HOME:       0xD2,
    END:        0xD5,
    CAPS:       0xC1,
    F1:         0xC2,
    F2:         0xC3,
    F3:         0xC4,
    F4:         0xC5,
    F5:         0xC6,
    F6:         0xC7,
    F7:         0xC8,
    F9:         0xCA,
    F10:        0xCB,
    F8:         0xC9,
    F11:        0xCC,
    F12:        0xCD,
    M_RIGHT:    0xCE,
    M_LEFT:     0xCF,
    M_MIDDLE:   0xD0
};


function parseKeyCombo(combo:string): number[] {
  const tokens = combo.trim().toUpperCase().split(/[\s+]+/); // Split on space or +
  const result = [];

  for (let t of tokens) {
    switch (t) {
      case 'CTRL': result.push(0x80); break;
      case 'SHIFT': result.push(0x81); break;
      case 'ALT': result.push(0x82); break;
      case 'GUI': result.push(0x83); break;
      case 'UP': result.push(0xDA); break;
      case 'DOWN': result.push(0xD9); break;  
      case 'LEFT': result.push(0xD8); break;
      case 'RIGHT': result.push(0xD7); break;
      case 'BACKSPACE': result.push(0xB2); break;
      case 'TAB': result.push(0xB3); break;
      case 'RETURN': result.push(0xB0); break;
      case 'ESC': result.push(0xB1); break;
      case 'INS': result.push(0xD1); break;
      case 'DEL': result.push(0xD4); break;
      case 'PAGE_UP': result.push(0xD3); break;
      case 'PAGE_DOWN': result.push(0xD6); break;
      case 'HOME': result.push(0xD2); break;
      case 'END': result.push(0xD5); break;
      case 'CAPS': result.push(0xC1); break;
      case 'F1': result.push(0xC2); break;
      case 'F2': result.push(0xC3); break;
      case 'F3': result.push(0xC4); break;
      case 'F4': result.push(0xC5); break;  
      case 'F5': result.push(0xC6); break;
      case 'F6': result.push(0xC7); break;
      case 'F7': result.push(0xC8); break;
      case 'F8': result.push(0xC9); break;
      case 'F9': result.push(0xCA); break;
      case 'F10': result.push(0xCB); break;
      case 'F11': result.push(0xCC); break;
      case 'F12': result.push(0xCD); break;
      case 'M_RIGHT': result.push(0xCE); break;
      case 'M_LEFT': result.push(0xCF); break;
      case 'M_MIDDLE': result.push(0xD0); break;
      
      default:
        if (t.length === 1) {
          result.push(t.charCodeAt(0));
        }
        break;
    }
    if (result.length === 3) break; // Max 3
  }

  return result; // Let the caller decide what to send
}





</script>

</body>
</html>
